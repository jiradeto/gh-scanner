// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/infrastructure/repos/repository/main.go

// Package repositoryrepomocks is a generated GoMock package.
package repositoryrepomocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/jiradeto/gh-scanner/app/domain/entities"
	repositoriyepo "github.com/jiradeto/gh-scanner/app/infrastructure/repos/repository"
	gorm "gorm.io/gorm"
)

// Mocks is a mock of Repo interface.
type Mocks struct {
	ctrl     *gomock.Controller
	recorder *MocksMockRecorder
}

// MocksMockRecorder is the mock recorder for Mocks.
type MocksMockRecorder struct {
	mock *Mocks
}

// NewMocks creates a new mock instance.
func NewMocks(ctrl *gomock.Controller) *Mocks {
	mock := &Mocks{ctrl: ctrl}
	mock.recorder = &MocksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocks) EXPECT() *MocksMockRecorder {
	return m.recorder
}

// CreateOneRepository mocks base method.
func (m *Mocks) CreateOneRepository(tx *gorm.DB, input repositoriyepo.CreateOneRepositoryInput) (*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneRepository", tx, input)
	ret0, _ := ret[0].(*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOneRepository indicates an expected call of CreateOneRepository.
func (mr *MocksMockRecorder) CreateOneRepository(tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneRepository", reflect.TypeOf((*Mocks)(nil).CreateOneRepository), tx, input)
}

// CreateOneScanResult mocks base method.
func (m *Mocks) CreateOneScanResult(tx *gorm.DB, input repositoriyepo.CreateOneScanResultInput) (*entities.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneScanResult", tx, input)
	ret0, _ := ret[0].(*entities.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOneScanResult indicates an expected call of CreateOneScanResult.
func (mr *MocksMockRecorder) CreateOneScanResult(tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneScanResult", reflect.TypeOf((*Mocks)(nil).CreateOneScanResult), tx, input)
}

// DeleteOneRepository mocks base method.
func (m *Mocks) DeleteOneRepository(tx *gorm.DB, input repositoriyepo.DeleteOneRepositoryInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneRepository", tx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneRepository indicates an expected call of DeleteOneRepository.
func (mr *MocksMockRecorder) DeleteOneRepository(tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneRepository", reflect.TypeOf((*Mocks)(nil).DeleteOneRepository), tx, input)
}

// FindAllRepositories mocks base method.
func (m *Mocks) FindAllRepositories(tx *gorm.DB, input repositoriyepo.FindAllRepositoriesInput) ([]*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRepositories", tx, input)
	ret0, _ := ret[0].([]*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRepositories indicates an expected call of FindAllRepositories.
func (mr *MocksMockRecorder) FindAllRepositories(tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRepositories", reflect.TypeOf((*Mocks)(nil).FindAllRepositories), tx, input)
}

// FindAllScanResults mocks base method.
func (m *Mocks) FindAllScanResults(tx *gorm.DB, input repositoriyepo.FindAllScanResultsInput) ([]*entities.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllScanResults", tx, input)
	ret0, _ := ret[0].([]*entities.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllScanResults indicates an expected call of FindAllScanResults.
func (mr *MocksMockRecorder) FindAllScanResults(tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllScanResults", reflect.TypeOf((*Mocks)(nil).FindAllScanResults), tx, input)
}

// FindOneRepository mocks base method.
func (m *Mocks) FindOneRepository(tx *gorm.DB, input repositoriyepo.FindOneRepositoryInput) (*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneRepository", tx, input)
	ret0, _ := ret[0].(*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneRepository indicates an expected call of FindOneRepository.
func (mr *MocksMockRecorder) FindOneRepository(tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneRepository", reflect.TypeOf((*Mocks)(nil).FindOneRepository), tx, input)
}

// FindOneScanResult mocks base method.
func (m *Mocks) FindOneScanResult(tx *gorm.DB, input repositoriyepo.FindOneScanResultInput) (*entities.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneScanResult", tx, input)
	ret0, _ := ret[0].(*entities.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneScanResult indicates an expected call of FindOneScanResult.
func (mr *MocksMockRecorder) FindOneScanResult(tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneScanResult", reflect.TypeOf((*Mocks)(nil).FindOneScanResult), tx, input)
}

// UpdateOneRepository mocks base method.
func (m *Mocks) UpdateOneRepository(tx *gorm.DB, input repositoriyepo.UpdateOneRepositoryInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneRepository", tx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOneRepository indicates an expected call of UpdateOneRepository.
func (mr *MocksMockRecorder) UpdateOneRepository(tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneRepository", reflect.TypeOf((*Mocks)(nil).UpdateOneRepository), tx, input)
}

// UpdateOneScanResult mocks base method.
func (m *Mocks) UpdateOneScanResult(tx *gorm.DB, input repositoriyepo.UpdateOneScanResultInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneScanResult", tx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOneScanResult indicates an expected call of UpdateOneScanResult.
func (mr *MocksMockRecorder) UpdateOneScanResult(tx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneScanResult", reflect.TypeOf((*Mocks)(nil).UpdateOneScanResult), tx, input)
}
