// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/usecases/repository/main.go

// Package repositoryusecasemocks is a generated GoMock package.
package repositoryusecasemocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/jiradeto/gh-scanner/app/domain/entities"
	repository "github.com/jiradeto/gh-scanner/app/usecases/repository"
)

// Mocks is a mock of UseCase interface.
type Mocks struct {
	ctrl     *gomock.Controller
	recorder *MocksMockRecorder
}

// MocksMockRecorder is the mock recorder for Mocks.
type MocksMockRecorder struct {
	mock *Mocks
}

// NewMocks creates a new mock instance.
func NewMocks(ctrl *gomock.Controller) *Mocks {
	mock := &Mocks{ctrl: ctrl}
	mock.recorder = &MocksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocks) EXPECT() *MocksMockRecorder {
	return m.recorder
}

// CreateOneRepository mocks base method.
func (m *Mocks) CreateOneRepository(ctx context.Context, input repository.CreateOneRepositoryInput) (*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneRepository", ctx, input)
	ret0, _ := ret[0].(*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOneRepository indicates an expected call of CreateOneRepository.
func (mr *MocksMockRecorder) CreateOneRepository(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneRepository", reflect.TypeOf((*Mocks)(nil).CreateOneRepository), ctx, input)
}

// DeleteOneRepository mocks base method.
func (m *Mocks) DeleteOneRepository(ctx context.Context, input repository.DeleteOneRepositoryInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneRepository", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneRepository indicates an expected call of DeleteOneRepository.
func (mr *MocksMockRecorder) DeleteOneRepository(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneRepository", reflect.TypeOf((*Mocks)(nil).DeleteOneRepository), ctx, input)
}

// FindAllRepositories mocks base method.
func (m *Mocks) FindAllRepositories(ctx context.Context, input repository.FindAllRepositoriesInput) ([]*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRepositories", ctx, input)
	ret0, _ := ret[0].([]*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRepositories indicates an expected call of FindAllRepositories.
func (mr *MocksMockRecorder) FindAllRepositories(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRepositories", reflect.TypeOf((*Mocks)(nil).FindAllRepositories), ctx, input)
}

// FindAllScanResults mocks base method.
func (m *Mocks) FindAllScanResults(ctx context.Context, input repository.FindAllScanResultsInput) ([]*entities.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllScanResults", ctx, input)
	ret0, _ := ret[0].([]*entities.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllScanResults indicates an expected call of FindAllScanResults.
func (mr *MocksMockRecorder) FindAllScanResults(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllScanResults", reflect.TypeOf((*Mocks)(nil).FindAllScanResults), ctx, input)
}

// FindOneRepository mocks base method.
func (m *Mocks) FindOneRepository(ctx context.Context, input repository.FindOneRepositoryInput) (*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneRepository", ctx, input)
	ret0, _ := ret[0].(*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneRepository indicates an expected call of FindOneRepository.
func (mr *MocksMockRecorder) FindOneRepository(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneRepository", reflect.TypeOf((*Mocks)(nil).FindOneRepository), ctx, input)
}

// FindOneScanResult mocks base method.
func (m *Mocks) FindOneScanResult(ctx context.Context, input repository.FindOneScanResultInput) (*entities.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneScanResult", ctx, input)
	ret0, _ := ret[0].(*entities.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneScanResult indicates an expected call of FindOneScanResult.
func (mr *MocksMockRecorder) FindOneScanResult(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneScanResult", reflect.TypeOf((*Mocks)(nil).FindOneScanResult), ctx, input)
}

// StartScanner mocks base method.
func (m *Mocks) StartScanner(ctx context.Context, input repository.StartScannerInput) (*entities.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartScanner", ctx, input)
	ret0, _ := ret[0].(*entities.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartScanner indicates an expected call of StartScanner.
func (mr *MocksMockRecorder) StartScanner(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartScanner", reflect.TypeOf((*Mocks)(nil).StartScanner), ctx, input)
}

// UpdateOneRepository mocks base method.
func (m *Mocks) UpdateOneRepository(ctx context.Context, input repository.UpdateOneRepositoryInput) (*entities.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneRepository", ctx, input)
	ret0, _ := ret[0].(*entities.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneRepository indicates an expected call of UpdateOneRepository.
func (mr *MocksMockRecorder) UpdateOneRepository(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneRepository", reflect.TypeOf((*Mocks)(nil).UpdateOneRepository), ctx, input)
}

// UpdateOneScanResult mocks base method.
func (m *Mocks) UpdateOneScanResult(ctx context.Context, input repository.UpdateOneScanResultInput) (*entities.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneScanResult", ctx, input)
	ret0, _ := ret[0].(*entities.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneScanResult indicates an expected call of UpdateOneScanResult.
func (mr *MocksMockRecorder) UpdateOneScanResult(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneScanResult", reflect.TypeOf((*Mocks)(nil).UpdateOneScanResult), ctx, input)
}
